Traceback (most recent call last):
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import plotly.graph_objects as go



#> Parameters
y0, y1, ny, yinit =  -.5,  .5, 6, .0
z0, z1, nz, zinit =  -.5,  .5, 6, .0
t0, t1, nt, tinit = -90., 90., 7, .0 
dcone = .8

dy = ( y1 - y0 ) / ( ny - 1 )
dz = ( z1 - z0 ) / ( nz - 1 )
dt = ( t1 - t0 ) / ( nt - 1 )

#> Cone
# Local coordinates for the cone
u = np.linspace(0, 2 * np.pi, 100)  # Angle in the xy-plane (0 to 2pi)
v = np.linspace(-1, 1, 21)          # Height of the cone from apex (0 to 1)
u, v = np.meshgrid(u, v)

x = dcone * v * np.cos(u)  # x-coordinate
y = dcone * v * np.sin(u)  # y-coordinate
z = v                      # z-coordinate (height of the cone)

# Local coordinates for the plane
u_plane = np.linspace(-2, 2, 5)
v_plane = np.linspace(-2, 2, 5)
u_plane, v_plane = np.meshgrid(u_plane, v_plane)

x_plane = u_plane                           # x-coordinate
y_plane = yinit + v_plane * np.cos(tinit)   # y-coordinate
z_plane = zinit + v_plane * np.sin(tinit)   # z-coordinate (height of the cone)


#> Figure
layout = dict(
               width=500, height=500,
               paper_bgcolor='white',
               plot_bgcolor='white',
               scene = dict(
                   xaxis=dict(title='X', range=[-1,1]),
                   yaxis=dict(title='Y', range=[-1,1]),
                   zaxis=dict(title='Z', range=[-1,1]),
               ),
)

data_cone = go.Surface(
    z=z, x=x, y=y,
    surfacecolor=np.full_like(z, 1),
    colorscale=[[0, 'rgba(0, 0, 255, 0.3)'], [1, 'rgba(0, 0, 255, 0.3)']],  # Blue with alpha
    showscale=False,  # No color scale bar
    # colorscale='Viridis',
    opacity=0.7
)

fig = go.Figure(layout=layout)
fig.add_trace(data_cone,)

int_active = 3
int_steps  = 5
int_values = np.arange(int_steps)

yv = y0 + np.arange(ny)*dy
zv = z0 + np.arange(nz)*dz
tv = t0 + np.arange(nt)*dt
axisdim = .2

for z in zv:
    
    #> Evaluate points of the plane
    yp, zp, tp = yinit, z, tinit
    x_p = u_plane                     # x-coordinate
    y_p = yp + v_plane * np.cos(tp)   # y-coordinate
    z_p = zp + v_plane * np.sin(tp)   # z-coordinate (height of the cone)

    #> Add trace
    # 1. plane
    fig.add_trace(
        go.Surface(
            visible=False,
            x=x_p, y=y_p, z=z_p,
            surfacecolor=np.full_like(z_plane, 1),                                  # Plane color
            colorscale=[[0, 'rgba(255, 0, 0, 0.5)'], [1, 'rgba(255, 0, 0, 0.5)']],  # Red, alpha=.5
        )           
    )
    # 2. reference point and axes
    fig.add_trace(
        go.Scatter3d(
            line=dict(color='black', width=2),
            visible=False,
            mode='lines',
            x=[.0, .0, .0,],
            y = [yp-axisdim*np.sin(tp), yp, yp+axisdim*np.cos(tp)], 
            z = [zp+axisdim*np.cos(tp), zp, zp+axisdim*np.sin(tp)], 
        )
    )

#> Sliders - w/o using widgets
int_active = 3
int_steps  = 5
int_values = np.arange(int_steps)

base_traces = 1
traces_per_step = 2
steps_y = []
steps_z = []
for i in range(0, int_values.shape[0]):
    visarray = [False] * len(fig.data)
    visarray[0:base_traces] = [True] * base_traces
    curr_idx = int(base_traces +  i    * traces_per_step)
    next_idx = int(base_traces + (i+1) * traces_per_step)
    visarray[curr_idx:next_idx] = [True] * traces_per_step
    step = dict(
        method = 'update',
        args=[{'visible': visarray}],
    )
    steps_z.append(step)
    steps_y.append(step)

print(f"visarray: {visarray}")

#> Initial conditions
for i in range(traces_per_step):
    curr_idx = int_active
    fig.data[1+curr_idx].visible = True

#> Layout
int_slider = dict(active=int_active, steps=int_steps,)
y_slider = dict(active=int_active, currentvalue={"prefix": "yP: "}, steps=steps_y)
z_slider = dict(active=int_active, currentvalue={"prefix": "zP: "}, steps=steps_z)
# t_slider = dict(active=int_active, steps=nt)
sliders = [
    y_slider,
    z_slider
]

fig.update_layout(
    sliders=sliders,
    updatemenus=[
       dict(
           buttons=list([
                dict=(args=['colorscale', [[0, 'rgba(255, 0,   0, 0.5)'], [1, 'rgba(255, 0,   0, 0.5)']] ], method='restyle', label='red'),
                dict=(args=['colorscale', [[0, 'rgba(  0, 0, 255, 0.5)'], [1, 'rgba(  0, 0, 255, 0.5)']] ], method='restyle', label='blue'),
           ])
       )
    ]
)

fig.show()
------------------


[0;36m  Cell [0;32mIn[1], line 143[0;36m[0m
[0;31m    dict=(args=['colorscale', [[0, 'rgba(255, 0,   0, 0.5)'], [1, 'rgba(255, 0,   0, 0.5)']] ], method='restyle', label='red'),[0m
[0m        ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax


